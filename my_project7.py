# -*- coding: utf-8 -*-
"""MY PROJECT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11iGX6uEu4IXgrwnfYfaAPBjysCJDkSvF
"""

import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from tabulate import tabulate

st.title('Stock Trading Strategy Backtesting App')

# Get user inputs
principal = st.number_input('Enter the principal amount:', value=10000.0)
symbol = st.text_input('Enter the stock symbol:')
start_date = st.date_input('Enter the start date:')
end_date = st.date_input('Enter the end date:')
strategy = st.selectbox('Select the trading strategy:', options=['SMA', 'EMA', 'Mean Reversion'])

if st.button('Run Backtest'):
    # Read data for the given stock symbol and date range
    data = pd.read_csv(f"/content/drive/MyDrive/Data/{symbol}.csv", parse_dates=['Date'], index_col='Date')
    data = data.loc[start_date:end_date]

    # Calculate moving averages and trading signals
    if strategy == 'SMA':
        data['20_SMA'] = data.Close.rolling(window=20, min_periods=1).mean()
        data['50_SMA'] = data.Close.rolling(window=50, min_periods=1).mean()
        data['Signal'] = np.where(data['20_SMA'] > data['50_SMA'], 1, 0)
    elif strategy == 'EMA':
        data['20_EMA'] = data.Close.ewm(span=20, adjust=False).mean()
        data['50_EMA'] = data.Close.ewm(span=50, adjust=False).mean()
        data['Signal'] = np.where(data['20_EMA'] > data['50_EMA'], 1, 0)
    elif strategy == 'Mean Reversion':
        data['5_SMA'] = data.Close.rolling(window=5, min_periods=1).mean()
        data['30_SMA'] = data.Close.rolling(window=30, min_periods=1).mean()
        data['Price Change'] = data.Close.pct_change()
        data['Signal'] = np.where((data['5_SMA'] < data['30_SMA']) & (data['Close'] < 0.98*data['5_SMA']), 1, np.where((data['5_SMA'] > data['30_SMA']) & (data['Close'] > 1.02*data['5_SMA']), -1, 0))
    else:
        st.warning('Invalid strategy selected!')
        st.stop()

    data['Position'] = data.Signal.diff()

    # Create plot
    fig, ax = plt.subplots(figsize=(20,10))
    data['Close'].plot(color = 'k', label= 'Close Price')
    if strategy == 'SMA':
        data['20_SMA'].plot(color = 'b',label = '20-day SMA')
        data['50_SMA'].plot(color = 'g', label = '50-day SMA')
    elif strategy == 'EMA':
        data['20_EMA'].plot(color = 'b', label = '20-day EMA')
        data['50_EMA'].plot(color = 'g', label = '50-day EMA')
    elif strategy == 'Mean Reversion':
        data['5_SMA'].plot(color = 'b', label = '5-day SMA')
        data['30_SMA'].plot(color = 'g', label = '30-day SMA')
        ax.set_xlabel('Date')
        ax.set_ylabel('Price')
        ax.legend()
    # Calculate returns
    data['Returns'] = data['Close'].pct_change()
    data['Cumulative Returns'] = (1 + data['Returns']).cumprod()

    # Calculate trading statistics
    total_trades = data['Position'].abs().sum()
    total_returns = (data['Returns']*data['Position']).sum()
    win_trades = (data['Returns']*data['Position']).where(data['Returns']*data['Position'] > 0).sum()
    loss_trades = (data['Returns']*data['Position']).where(data['Returns']*data['Position'] < 0).sum()
    win_rate = round((len(data['Returns']*data['Position'] > 0)/total_trades)*100, 2)
    avg_win = round(win_trades/(data['Position']*data['Returns']).abs().sum(), 2)
    avg_loss = round(loss_trades/(data['Position']*data['Returns']).abs().sum(), 2)
    max_loss = round((data['Returns']*data['Position']).min(), 2)
    max_win = round((data['Returns']*data['Position']).max(), 2)
    total_profit = round(data['Cumulative Returns'][-1]*principal - principal, 2)

    # Display results
    st.write('## Trading Statistics')
    st.write(f'Total Trades: {total_trades}')
    st.write(f'Total Returns: {total_returns:.2f}')
    st.write(f'Win Trades: {win_trades:.2f}')
    st.write(f'Loss Trades: {loss_trades:.2f}')
    st.write(f'Win Rate: {win_rate:.2f}%')
    st.write(f'Average Win: {avg_win:.2f}')
    st.write(f'Average Loss: {avg_loss:.2f}')
    st.write(f'Maximum Loss: {max_loss:.2f}')
    st.write(f'Maximum Win: {max_win:.2f}')
    st.write(f'Total Profit: {total_profit:.2f}')

    # Display table of trading signals and positions
    st.write('## Trading Signals and Positions')
    st.write(tabulate(data[['Close', 'Position', 'Signal']], headers='keys', tablefmt='psql'))

from google.colab import drive
drive.mount('/content/drive')

"""# New Section"""